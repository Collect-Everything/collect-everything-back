generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Company {
  id               Int               @id @default(autoincrement())
  name             String
  phone            String
  email            String
  addressLabel     String
  street           String
  streetNumber     String
  postalCode       String
  city             String
  country          String
  color            String?
  logo             String?
  key_phrases      Json?
  productsType     String?
  siret            String?
  phoneContact     String?
  emailContact     String?
  links            Json?
  externalUrl      String?
  companyCustomers CompanyCustomer[]
  companyUsers     CompanyUser[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())

  @@unique([email])
}

model CompanyCustomer {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String
  password  String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CompanyUser {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String
  password  String
  roleId    Int
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  Role      Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Role {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  CompanyUsers CompanyUser[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}

model Order {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  CompanyCustomer   CompanyCustomer? @relation(fields: [companyCustomerId], references: [id])
  companyCustomerId Int?
}

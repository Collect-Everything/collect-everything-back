generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id
  firstname String
  lastname  String
  email     String @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum SubscriptionStatus {
    FREE_TRIAL
    ACTIVE
    CANCELED
    EXPIRED
  }

model Company {
  id String @id
  name             String
  phone            String
  email            String
  addressLabel     String
  street           String
  streetNumber     String
  postalCode       String
  city             String
  country          String
  storeName        String?
  storeSlug        String? @unique
  color            String?
  logo             String?
  key_phrases      Json?
  productsType     String?
  siret            String?
  phoneContact     String?
  emailContact     String?
  links            Json?
  externalUrl      String?
  companyCustomers CompanyCustomer[]
  companyUsers     CompanyUser[]
  subscriptionStatus SubscriptionStatus
  subscriptionUpdatedAt DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())

  products Product[]
  categories ProductCategory[]

  @@unique([email])
}

model CompanyCustomer {
  id        String      @id
  firstname String
  lastname  String
  email     String 
  password  String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String 
  orders    Order[]
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([email])
}

enum CompanyUserRole {
    ADMIN
    STOCK_MANAGER
    ORDER_MANAGER
  }
model CompanyUser {
  id        String      @id
  firstname String
  lastname  String
  email     String
  password  String
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String 
  role CompanyUserRole
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([email])
}

model ProductCategory {
  id String @id
  company Company @relation(fields: [companyId], references: [id])
  companyId String
  name     String
  products Product[]
}

model Product {
    id String @id
    name String
    description String?
    price Float
    image String?
    category ProductCategory @relation(fields: [categoryId], references: [id])
    categoryId String
    company Company @relation(fields: [companyId], references: [id])
    companyId String
    conditioning String
    stock Int
    size String?
    unity String

    orderProducts OrderProduct[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
  }

enum OrderStatus {
    CART
    PENDING
    CONFIRMED
    SHIPPED
    DELIVERED
}

model Order {
    id String @id
    status OrderStatus

    customer CompanyCustomer @relation(fields: [customerId], references: [id])
    customerId String

    orderProducts OrderProduct[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
  }

model OrderProduct {
    id String @id

    order Order @relation(fields: [orderId], references: [id])
    orderId String

    product Product @relation(fields: [productId], references: [id])
    productId String

    quantity Int
    price Float

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
  }
